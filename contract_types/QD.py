from typing import Tuple, Union
    
from brownie.network.contract import ProjectContract
from brownie.network.transaction import TransactionReceipt

from contract_types.basic_types import *

from decimal import Decimal

class QDType(ProjectContract):
    def MINT_QD_PER_DAY_MAX(self, d: Union[TxnConfig, None] = None) -> int:
        ...

    def PRICE_PRECISION(self, d: Union[TxnConfig, None] = None) -> int:
        ...

    def SALE_LENGTH(self, d: Union[TxnConfig, None] = None) -> int:
        ...

    def SALE_START(self, d: Union[TxnConfig, None] = None) -> int:
        ...

    def UA(self, d: Union[TxnConfig, None] = None) -> EvmAccount:
        ...

    def allowance(self, owner: EvmAccount, spender: EvmAccount, d: Union[TxnConfig, None] = None) -> int:
        ...

    def approve(self, spender: EvmAccount, amount: Union[int, Decimal], d: Union[TxnConfig, None] = None) -> TransactionReceipt:
        ...

    def balanceOf(self, account: EvmAccount, d: Union[TxnConfig, None] = None) -> int:
        ...

    def calculate_price(self, block_timestamp: Union[int, Decimal], d: Union[TxnConfig, None] = None) -> int:
        ...

    def decimals(self, d: Union[TxnConfig, None] = None) -> int:
        ...

    def decreaseAllowance(self, spender: EvmAccount, subtractedValue: Union[int, Decimal], d: Union[TxnConfig, None] = None) -> TransactionReceipt:
        ...

    def final_price(self, d: Union[TxnConfig, None] = None) -> int:
        ...

    def get_total_supply_cap(self, block_timestamp: Union[int, Decimal], d: Union[TxnConfig, None] = None) -> int:
        ...

    def increaseAllowance(self, spender: EvmAccount, addedValue: Union[int, Decimal], d: Union[TxnConfig, None] = None) -> TransactionReceipt:
        ...

    def locker(self, d: Union[TxnConfig, None] = None) -> EvmAccount:
        ...

    def mint(self, qd_amt: Union[int, Decimal], beneficiary: EvmAccount, d: Union[TxnConfig, None] = None) -> TransactionReceipt:
        ...

    def name(self, d: Union[TxnConfig, None] = None) -> str:
        ...

    def owner(self, d: Union[TxnConfig, None] = None) -> EvmAccount:
        ...

    def private_deposited(self, d: Union[TxnConfig, None] = None) -> int:
        ...

    def private_minted(self, d: Union[TxnConfig, None] = None) -> int:
        ...

    def private_price(self, d: Union[TxnConfig, None] = None) -> int:
        ...

    def public_deposited(self, d: Union[TxnConfig, None] = None) -> int:
        ...

    def qd_amt_to_usdt_amt(self, qd_amt: Union[int, Decimal], block_timestamp: Union[int, Decimal], d: Union[TxnConfig, None] = None) -> int:
        ...

    def renounceOwnership(self, d: Union[TxnConfig, None] = None) -> TransactionReceipt:
        ...

    def start_price(self, d: Union[TxnConfig, None] = None) -> int:
        ...

    def symbol(self, d: Union[TxnConfig, None] = None) -> str:
        ...

    def totalSupply(self, d: Union[TxnConfig, None] = None) -> int:
        ...

    def transfer(self, to: EvmAccount, amount: Union[int, Decimal], d: Union[TxnConfig, None] = None) -> TransactionReceipt:
        ...

    def transferFrom(self, from_: EvmAccount, to: EvmAccount, amount: Union[int, Decimal], d: Union[TxnConfig, None] = None) -> TransactionReceipt:
        ...

    def transferOwnership(self, newOwner: EvmAccount, d: Union[TxnConfig, None] = None) -> TransactionReceipt:
        ...

    def usdt(self, d: Union[TxnConfig, None] = None) -> EvmAccount:
        ...

    def withdraw(self, d: Union[TxnConfig, None] = None) -> TransactionReceipt:
        ...

