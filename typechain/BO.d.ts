/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BOInterface extends ethers.utils.Interface {
  functions: {
    "BO_FEE()": FunctionFragment;
    "C_NOTE()": FunctionFragment;
    "DIGITS()": FunctionFragment;
    "DURATION()": FunctionFragment;
    "F8N()": FunctionFragment;
    "MAX_PER_DAY()": FunctionFragment;
    "MIN_APR()": FunctionFragment;
    "MIN_CR()": FunctionFragment;
    "ONE()": FunctionFragment;
    "ONE_CENT()": FunctionFragment;
    "QUID_ETH()": FunctionFragment;
    "SDAI()": FunctionFragment;
    "START_PRICE()": FunctionFragment;
    "TARGET()": FunctionFragment;
    "_BO(uint256)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "borrow(uint256,bool)": FunctionFragment;
    "chainlink()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "deposit(address,uint256,bool,bool)": FunctionFragment;
    "drop(address[])": FunctionFragment;
    "feeTargets(uint256)": FunctionFragment;
    "fold(bool)": FunctionFragment;
    "get_stats()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "lock()": FunctionFragment;
    "longMedian()": FunctionFragment;
    "mint(uint256,address)": FunctionFragment;
    "name()": FunctionFragment;
    "protect(bool)": FunctionFragment;
    "sdai()": FunctionFragment;
    "set_price(uint256)": FunctionFragment;
    "shortMedian()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "vote(uint256,bool)": FunctionFragment;
    "withdraw(uint256,bool)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BO_FEE", values?: undefined): string;
  encodeFunctionData(functionFragment: "C_NOTE", values?: undefined): string;
  encodeFunctionData(functionFragment: "DIGITS", values?: undefined): string;
  encodeFunctionData(functionFragment: "DURATION", values?: undefined): string;
  encodeFunctionData(functionFragment: "F8N", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_PER_DAY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MIN_APR", values?: undefined): string;
  encodeFunctionData(functionFragment: "MIN_CR", values?: undefined): string;
  encodeFunctionData(functionFragment: "ONE", values?: undefined): string;
  encodeFunctionData(functionFragment: "ONE_CENT", values?: undefined): string;
  encodeFunctionData(functionFragment: "QUID_ETH", values?: undefined): string;
  encodeFunctionData(functionFragment: "SDAI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "START_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TARGET", values?: undefined): string;
  encodeFunctionData(functionFragment: "_BO", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "chainlink", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(functionFragment: "drop", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "feeTargets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fold", values: [boolean]): string;
  encodeFunctionData(functionFragment: "get_stats", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "longMedian",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "protect", values: [boolean]): string;
  encodeFunctionData(functionFragment: "sdai", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "set_price",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shortMedian",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "BO_FEE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "C_NOTE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DIGITS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DURATION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "F8N", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PER_DAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MIN_APR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MIN_CR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ONE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ONE_CENT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "QUID_ETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SDAI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "START_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TARGET", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_BO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chainlink", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeTargets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fold", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_stats", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "longMedian", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protect", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sdai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set_price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shortMedian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Minted(address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Transferred(address,address,uint256)": EventFragment;
    "Voted(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Minted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Voted"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    value: BigNumber;
  }
>;

export type MintedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    reciever: string;
    cost_in_usd: BigNumber;
    amt: BigNumber;
  }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; value: BigNumber }
>;

export type TransferredEvent = TypedEvent<
  [string, string, BigNumber] & {
    sender: string;
    reciever: string;
    amt: BigNumber;
  }
>;

export type VotedEvent = TypedEvent<
  [string, BigNumber] & { voter: string; vote: BigNumber }
>;

export class BO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BOInterface;

  functions: {
    BO_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    C_NOTE(overrides?: CallOverrides): Promise<[BigNumber]>;

    DIGITS(overrides?: CallOverrides): Promise<[BigNumber]>;

    DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    F8N(overrides?: CallOverrides): Promise<[string]>;

    MAX_PER_DAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_APR(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_CR(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE_CENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    QUID_ETH(overrides?: CallOverrides): Promise<[string]>;

    SDAI(overrides?: CallOverrides): Promise<[string]>;

    START_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    TARGET(overrides?: CallOverrides): Promise<[BigNumber]>;

    _BO(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        start: BigNumber;
        locked: BigNumber;
        minted: BigNumber;
      }
    >;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrow(
      amount: BigNumberish,
      short: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    chainlink(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      beneficiary: string,
      amount: BigNumberish,
      sp: boolean,
      long: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    drop(
      pledges: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeTargets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fold(
      short: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    get_stats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { assets: BigNumber; liabilities: BigNumber }
    >;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lock(overrides?: CallOverrides): Promise<[string]>;

    longMedian(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        apr: BigNumber;
        total: BigNumber;
        sum_w_k: BigNumber;
        k: BigNumber;
      }
    >;

    mint(
      amt: BigNumberish,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    protect(
      prime: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sdai(overrides?: CallOverrides): Promise<[string]>;

    set_price(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shortMedian(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        apr: BigNumber;
        total: BigNumber;
        sum_w_k: BigNumber;
        k: BigNumber;
      }
    >;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vote(
      apr: BigNumberish,
      short: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amt: BigNumberish,
      qd: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BO_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  C_NOTE(overrides?: CallOverrides): Promise<BigNumber>;

  DIGITS(overrides?: CallOverrides): Promise<BigNumber>;

  DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  F8N(overrides?: CallOverrides): Promise<string>;

  MAX_PER_DAY(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_APR(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_CR(overrides?: CallOverrides): Promise<BigNumber>;

  ONE(overrides?: CallOverrides): Promise<BigNumber>;

  ONE_CENT(overrides?: CallOverrides): Promise<BigNumber>;

  QUID_ETH(overrides?: CallOverrides): Promise<string>;

  SDAI(overrides?: CallOverrides): Promise<string>;

  START_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  TARGET(overrides?: CallOverrides): Promise<BigNumber>;

  _BO(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      start: BigNumber;
      locked: BigNumber;
      minted: BigNumber;
    }
  >;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  borrow(
    amount: BigNumberish,
    short: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  chainlink(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    beneficiary: string,
    amount: BigNumberish,
    sp: boolean,
    long: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  drop(
    pledges: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeTargets(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  fold(
    short: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  get_stats(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { assets: BigNumber; liabilities: BigNumber }
  >;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lock(overrides?: CallOverrides): Promise<string>;

  longMedian(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      apr: BigNumber;
      total: BigNumber;
      sum_w_k: BigNumber;
      k: BigNumber;
    }
  >;

  mint(
    amt: BigNumberish,
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  protect(
    prime: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sdai(overrides?: CallOverrides): Promise<string>;

  set_price(
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shortMedian(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      apr: BigNumber;
      total: BigNumber;
      sum_w_k: BigNumber;
      k: BigNumber;
    }
  >;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vote(
    apr: BigNumberish,
    short: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amt: BigNumberish,
    qd: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BO_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    C_NOTE(overrides?: CallOverrides): Promise<BigNumber>;

    DIGITS(overrides?: CallOverrides): Promise<BigNumber>;

    DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    F8N(overrides?: CallOverrides): Promise<string>;

    MAX_PER_DAY(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_APR(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_CR(overrides?: CallOverrides): Promise<BigNumber>;

    ONE(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_CENT(overrides?: CallOverrides): Promise<BigNumber>;

    QUID_ETH(overrides?: CallOverrides): Promise<string>;

    SDAI(overrides?: CallOverrides): Promise<string>;

    START_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    TARGET(overrides?: CallOverrides): Promise<BigNumber>;

    _BO(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        start: BigNumber;
        locked: BigNumber;
        minted: BigNumber;
      }
    >;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      amount: BigNumberish,
      short: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    chainlink(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(
      beneficiary: string,
      amount: BigNumberish,
      sp: boolean,
      long: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    drop(pledges: string[], overrides?: CallOverrides): Promise<void>;

    feeTargets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fold(short: boolean, overrides?: CallOverrides): Promise<void>;

    get_stats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { assets: BigNumber; liabilities: BigNumber }
    >;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lock(overrides?: CallOverrides): Promise<string>;

    longMedian(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        apr: BigNumber;
        total: BigNumber;
        sum_w_k: BigNumber;
        k: BigNumber;
      }
    >;

    mint(
      amt: BigNumberish,
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    protect(prime: boolean, overrides?: CallOverrides): Promise<void>;

    sdai(overrides?: CallOverrides): Promise<string>;

    set_price(price: BigNumberish, overrides?: CallOverrides): Promise<void>;

    shortMedian(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        apr: BigNumber;
        total: BigNumber;
        sum_w_k: BigNumber;
        k: BigNumber;
      }
    >;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    vote(
      apr: BigNumberish,
      short: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      amt: BigNumberish,
      qd: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    "Minted(address,uint256,uint256)"(
      reciever?: string | null,
      cost_in_usd?: null,
      amt?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { reciever: string; cost_in_usd: BigNumber; amt: BigNumber }
    >;

    Minted(
      reciever?: string | null,
      cost_in_usd?: null,
      amt?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { reciever: string; cost_in_usd: BigNumber; amt: BigNumber }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    "Transferred(address,address,uint256)"(
      sender?: string | null,
      reciever?: string | null,
      amt?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; reciever: string; amt: BigNumber }
    >;

    Transferred(
      sender?: string | null,
      reciever?: string | null,
      amt?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; reciever: string; amt: BigNumber }
    >;

    "Voted(address,uint256)"(
      voter?: string | null,
      vote?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { voter: string; vote: BigNumber }
    >;

    Voted(
      voter?: string | null,
      vote?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { voter: string; vote: BigNumber }
    >;
  };

  estimateGas: {
    BO_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    C_NOTE(overrides?: CallOverrides): Promise<BigNumber>;

    DIGITS(overrides?: CallOverrides): Promise<BigNumber>;

    DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    F8N(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PER_DAY(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_APR(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_CR(overrides?: CallOverrides): Promise<BigNumber>;

    ONE(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_CENT(overrides?: CallOverrides): Promise<BigNumber>;

    QUID_ETH(overrides?: CallOverrides): Promise<BigNumber>;

    SDAI(overrides?: CallOverrides): Promise<BigNumber>;

    START_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    TARGET(overrides?: CallOverrides): Promise<BigNumber>;

    _BO(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      amount: BigNumberish,
      short: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    chainlink(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      beneficiary: string,
      amount: BigNumberish,
      sp: boolean,
      long: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    drop(
      pledges: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeTargets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fold(
      short: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    get_stats(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lock(overrides?: CallOverrides): Promise<BigNumber>;

    longMedian(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      amt: BigNumberish,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    protect(
      prime: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sdai(overrides?: CallOverrides): Promise<BigNumber>;

    set_price(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shortMedian(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vote(
      apr: BigNumberish,
      short: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      amt: BigNumberish,
      qd: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BO_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    C_NOTE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DIGITS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    F8N(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_PER_DAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_APR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_CR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ONE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ONE_CENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    QUID_ETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SDAI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    START_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TARGET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _BO(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrow(
      amount: BigNumberish,
      short: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    chainlink(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      beneficiary: string,
      amount: BigNumberish,
      sp: boolean,
      long: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    drop(
      pledges: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeTargets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fold(
      short: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    get_stats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    longMedian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      amt: BigNumberish,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protect(
      prime: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sdai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    set_price(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shortMedian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vote(
      apr: BigNumberish,
      short: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amt: BigNumberish,
      qd: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
