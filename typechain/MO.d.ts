/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MOInterface extends ethers.utils.Interface {
  functions: {
    "CENT()": FunctionFragment;
    "C_NOTE()": FunctionFragment;
    "DIGITS()": FunctionFragment;
    "LENT()": FunctionFragment;
    "MAX_PER_DAY()": FunctionFragment;
    "MIN_APR()": FunctionFragment;
    "MIN_CR()": FunctionFragment;
    "MO_CUT()": FunctionFragment;
    "MO_FEE()": FunctionFragment;
    "ONE()": FunctionFragment;
    "QUID()": FunctionFragment;
    "RACK()": FunctionFragment;
    "SDAI()": FunctionFragment;
    "STACK()": FunctionFragment;
    "START_PRICE()": FunctionFragment;
    "TARGET()": FunctionFragment;
    "WETH()": FunctionFragment;
    "YEAR()": FunctionFragment;
    "_MO(uint256)": FunctionFragment;
    "_maturing(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "borrow(uint256,bool)": FunctionFragment;
    "call(uint256,bool,bool)": FunctionFragment;
    "chainlink()": FunctionFragment;
    "clocked(address[])": FunctionFragment;
    "clutch(bool)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "feeTargets(uint256)": FunctionFragment;
    "fold(bool)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "liquidated(uint256)": FunctionFragment;
    "longMedian()": FunctionFragment;
    "lotto()": FunctionFragment;
    "mint(uint256,address)": FunctionFragment;
    "name()": FunctionFragment;
    "put(address,uint256,bool,bool)": FunctionFragment;
    "sdai()": FunctionFragment;
    "set_price(uint256)": FunctionFragment;
    "shortMedian()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "vote(uint256,bool)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "CENT", values?: undefined): string;
  encodeFunctionData(functionFragment: "C_NOTE", values?: undefined): string;
  encodeFunctionData(functionFragment: "DIGITS", values?: undefined): string;
  encodeFunctionData(functionFragment: "LENT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_PER_DAY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MIN_APR", values?: undefined): string;
  encodeFunctionData(functionFragment: "MIN_CR", values?: undefined): string;
  encodeFunctionData(functionFragment: "MO_CUT", values?: undefined): string;
  encodeFunctionData(functionFragment: "MO_FEE", values?: undefined): string;
  encodeFunctionData(functionFragment: "ONE", values?: undefined): string;
  encodeFunctionData(functionFragment: "QUID", values?: undefined): string;
  encodeFunctionData(functionFragment: "RACK", values?: undefined): string;
  encodeFunctionData(functionFragment: "SDAI", values?: undefined): string;
  encodeFunctionData(functionFragment: "STACK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "START_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TARGET", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(functionFragment: "YEAR", values?: undefined): string;
  encodeFunctionData(functionFragment: "_MO", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "_maturing", values: [string]): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "call",
    values: [BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(functionFragment: "chainlink", values?: undefined): string;
  encodeFunctionData(functionFragment: "clocked", values: [string[]]): string;
  encodeFunctionData(functionFragment: "clutch", values: [boolean]): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeTargets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fold", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidated",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "longMedian",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lotto", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "put",
    values: [string, BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(functionFragment: "sdai", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "set_price",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shortMedian",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "CENT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "C_NOTE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DIGITS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "LENT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PER_DAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MIN_APR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MIN_CR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MO_CUT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MO_FEE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ONE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "QUID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "RACK", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SDAI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "STACK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "START_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TARGET", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "YEAR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_MO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_maturing", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "call", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chainlink", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "clocked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "clutch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeTargets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidated", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "longMedian", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lotto", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "put", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sdai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set_price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shortMedian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Long(address,address,uint256)": EventFragment;
    "Minted(address,uint256,uint256)": EventFragment;
    "Short(address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Voted(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Long"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Minted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Short"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Voted"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    value: BigNumber;
  }
>;

export type LongEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    clipper: string;
    fee: BigNumber;
  }
>;

export type MintedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    reciever: string;
    cost_in_usd: BigNumber;
    amt: BigNumber;
  }
>;

export type ShortEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    clipper: string;
    fee: BigNumber;
  }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; value: BigNumber }
>;

export type VotedEvent = TypedEvent<
  [string, BigNumber] & { voter: string; vote: BigNumber }
>;

export class MO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MOInterface;

  functions: {
    CENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    C_NOTE(overrides?: CallOverrides): Promise<[BigNumber]>;

    DIGITS(overrides?: CallOverrides): Promise<[BigNumber]>;

    LENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_PER_DAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_APR(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_CR(overrides?: CallOverrides): Promise<[BigNumber]>;

    MO_CUT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MO_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE(overrides?: CallOverrides): Promise<[BigNumber]>;

    QUID(overrides?: CallOverrides): Promise<[string]>;

    RACK(overrides?: CallOverrides): Promise<[BigNumber]>;

    SDAI(overrides?: CallOverrides): Promise<[string]>;

    STACK(overrides?: CallOverrides): Promise<[BigNumber]>;

    START_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    TARGET(overrides?: CallOverrides): Promise<[BigNumber]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    YEAR(overrides?: CallOverrides): Promise<[BigNumber]>;

    _MO(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        start: BigNumber;
        locked: BigNumber;
        minted: BigNumber;
        burned: BigNumber;
      }
    >;

    _maturing(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { cat: BigNumber; dog: BigNumber }>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrow(
      amount: BigNumberish,
      short: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    call(
      amt: BigNumberish,
      qd: boolean,
      eth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    chainlink(overrides?: CallOverrides): Promise<[string]>;

    clocked(
      plunges: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    clutch(
      grace: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeTargets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fold(
      short: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidated(
      when: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    longMedian(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        apr: BigNumber;
        total: BigNumber;
        sum_w_k: BigNumber;
        k: BigNumber;
      }
    >;

    lotto(overrides?: CallOverrides): Promise<[string]>;

    mint(
      amount: BigNumberish,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    put(
      beneficiary: string,
      amount: BigNumberish,
      _carry: boolean,
      long: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sdai(overrides?: CallOverrides): Promise<[string]>;

    set_price(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shortMedian(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        apr: BigNumber;
        total: BigNumber;
        sum_w_k: BigNumber;
        k: BigNumber;
      }
    >;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vote(
      apr: BigNumberish,
      short: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CENT(overrides?: CallOverrides): Promise<BigNumber>;

  C_NOTE(overrides?: CallOverrides): Promise<BigNumber>;

  DIGITS(overrides?: CallOverrides): Promise<BigNumber>;

  LENT(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_PER_DAY(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_APR(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_CR(overrides?: CallOverrides): Promise<BigNumber>;

  MO_CUT(overrides?: CallOverrides): Promise<BigNumber>;

  MO_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  ONE(overrides?: CallOverrides): Promise<BigNumber>;

  QUID(overrides?: CallOverrides): Promise<string>;

  RACK(overrides?: CallOverrides): Promise<BigNumber>;

  SDAI(overrides?: CallOverrides): Promise<string>;

  STACK(overrides?: CallOverrides): Promise<BigNumber>;

  START_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  TARGET(overrides?: CallOverrides): Promise<BigNumber>;

  WETH(overrides?: CallOverrides): Promise<string>;

  YEAR(overrides?: CallOverrides): Promise<BigNumber>;

  _MO(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      start: BigNumber;
      locked: BigNumber;
      minted: BigNumber;
      burned: BigNumber;
    }
  >;

  _maturing(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { cat: BigNumber; dog: BigNumber }>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  borrow(
    amount: BigNumberish,
    short: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  call(
    amt: BigNumberish,
    qd: boolean,
    eth: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  chainlink(overrides?: CallOverrides): Promise<string>;

  clocked(
    plunges: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  clutch(
    grace: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeTargets(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  fold(
    short: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidated(when: BigNumberish, overrides?: CallOverrides): Promise<string[]>;

  longMedian(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      apr: BigNumber;
      total: BigNumber;
      sum_w_k: BigNumber;
      k: BigNumber;
    }
  >;

  lotto(overrides?: CallOverrides): Promise<string>;

  mint(
    amount: BigNumberish,
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  put(
    beneficiary: string,
    amount: BigNumberish,
    _carry: boolean,
    long: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sdai(overrides?: CallOverrides): Promise<string>;

  set_price(
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shortMedian(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      apr: BigNumber;
      total: BigNumber;
      sum_w_k: BigNumber;
      k: BigNumber;
    }
  >;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vote(
    apr: BigNumberish,
    short: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CENT(overrides?: CallOverrides): Promise<BigNumber>;

    C_NOTE(overrides?: CallOverrides): Promise<BigNumber>;

    DIGITS(overrides?: CallOverrides): Promise<BigNumber>;

    LENT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PER_DAY(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_APR(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_CR(overrides?: CallOverrides): Promise<BigNumber>;

    MO_CUT(overrides?: CallOverrides): Promise<BigNumber>;

    MO_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    ONE(overrides?: CallOverrides): Promise<BigNumber>;

    QUID(overrides?: CallOverrides): Promise<string>;

    RACK(overrides?: CallOverrides): Promise<BigNumber>;

    SDAI(overrides?: CallOverrides): Promise<string>;

    STACK(overrides?: CallOverrides): Promise<BigNumber>;

    START_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    TARGET(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<string>;

    YEAR(overrides?: CallOverrides): Promise<BigNumber>;

    _MO(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        start: BigNumber;
        locked: BigNumber;
        minted: BigNumber;
        burned: BigNumber;
      }
    >;

    _maturing(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { cat: BigNumber; dog: BigNumber }>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      amount: BigNumberish,
      short: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    call(
      amt: BigNumberish,
      qd: boolean,
      eth: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    chainlink(overrides?: CallOverrides): Promise<string>;

    clocked(plunges: string[], overrides?: CallOverrides): Promise<void>;

    clutch(grace: boolean, overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    feeTargets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fold(short: boolean, overrides?: CallOverrides): Promise<void>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidated(
      when: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    longMedian(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        apr: BigNumber;
        total: BigNumber;
        sum_w_k: BigNumber;
        k: BigNumber;
      }
    >;

    lotto(overrides?: CallOverrides): Promise<string>;

    mint(
      amount: BigNumberish,
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    put(
      beneficiary: string,
      amount: BigNumberish,
      _carry: boolean,
      long: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    sdai(overrides?: CallOverrides): Promise<string>;

    set_price(price: BigNumberish, overrides?: CallOverrides): Promise<void>;

    shortMedian(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        apr: BigNumber;
        total: BigNumber;
        sum_w_k: BigNumber;
        k: BigNumber;
      }
    >;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    vote(
      apr: BigNumberish,
      short: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    "Long(address,address,uint256)"(
      owner?: string | null,
      clipper?: string | null,
      fee?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; clipper: string; fee: BigNumber }
    >;

    Long(
      owner?: string | null,
      clipper?: string | null,
      fee?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; clipper: string; fee: BigNumber }
    >;

    "Minted(address,uint256,uint256)"(
      reciever?: string | null,
      cost_in_usd?: null,
      amt?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { reciever: string; cost_in_usd: BigNumber; amt: BigNumber }
    >;

    Minted(
      reciever?: string | null,
      cost_in_usd?: null,
      amt?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { reciever: string; cost_in_usd: BigNumber; amt: BigNumber }
    >;

    "Short(address,address,uint256)"(
      owner?: string | null,
      clipper?: string | null,
      fee?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; clipper: string; fee: BigNumber }
    >;

    Short(
      owner?: string | null,
      clipper?: string | null,
      fee?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; clipper: string; fee: BigNumber }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    "Voted(address,uint256)"(
      voter?: string | null,
      vote?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { voter: string; vote: BigNumber }
    >;

    Voted(
      voter?: string | null,
      vote?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { voter: string; vote: BigNumber }
    >;
  };

  estimateGas: {
    CENT(overrides?: CallOverrides): Promise<BigNumber>;

    C_NOTE(overrides?: CallOverrides): Promise<BigNumber>;

    DIGITS(overrides?: CallOverrides): Promise<BigNumber>;

    LENT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PER_DAY(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_APR(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_CR(overrides?: CallOverrides): Promise<BigNumber>;

    MO_CUT(overrides?: CallOverrides): Promise<BigNumber>;

    MO_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    ONE(overrides?: CallOverrides): Promise<BigNumber>;

    QUID(overrides?: CallOverrides): Promise<BigNumber>;

    RACK(overrides?: CallOverrides): Promise<BigNumber>;

    SDAI(overrides?: CallOverrides): Promise<BigNumber>;

    STACK(overrides?: CallOverrides): Promise<BigNumber>;

    START_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    TARGET(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    YEAR(overrides?: CallOverrides): Promise<BigNumber>;

    _MO(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    _maturing(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      amount: BigNumberish,
      short: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    call(
      amt: BigNumberish,
      qd: boolean,
      eth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    chainlink(overrides?: CallOverrides): Promise<BigNumber>;

    clocked(
      plunges: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    clutch(
      grace: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeTargets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fold(
      short: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidated(
      when: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    longMedian(overrides?: CallOverrides): Promise<BigNumber>;

    lotto(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      amount: BigNumberish,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    put(
      beneficiary: string,
      amount: BigNumberish,
      _carry: boolean,
      long: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sdai(overrides?: CallOverrides): Promise<BigNumber>;

    set_price(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shortMedian(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vote(
      apr: BigNumberish,
      short: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    C_NOTE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DIGITS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_PER_DAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_APR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_CR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MO_CUT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MO_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ONE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    QUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RACK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SDAI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STACK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    START_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TARGET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    YEAR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _MO(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _maturing(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrow(
      amount: BigNumberish,
      short: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    call(
      amt: BigNumberish,
      qd: boolean,
      eth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    chainlink(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    clocked(
      plunges: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    clutch(
      grace: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeTargets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fold(
      short: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidated(
      when: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    longMedian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lotto(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      amount: BigNumberish,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    put(
      beneficiary: string,
      amount: BigNumberish,
      _carry: boolean,
      long: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sdai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    set_price(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shortMedian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vote(
      apr: BigNumberish,
      short: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
