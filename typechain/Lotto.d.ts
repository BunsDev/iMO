/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LottoInterface extends ethers.utils.Interface {
  functions: {
    "deployed()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositTimestamps(address,uint256)": FunctionFragment;
    "liquidityUSDT()": FunctionFragment;
    "liquidityWETH()": FunctionFragment;
    "maxTotalUSDT()": FunctionFragment;
    "maxTotalWETH()": FunctionFragment;
    "minLock()": FunctionFragment;
    "nonfungiblePositionManager()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "rawFulfillRandomWords(uint256,uint256[])": FunctionFragment;
    "recentWinner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestId()": FunctionFragment;
    "reward()": FunctionFragment;
    "sdai()": FunctionFragment;
    "setMaxTotalUSDT(uint256)": FunctionFragment;
    "setMaxTotalWETH(uint256)": FunctionFragment;
    "setMinLock(uint256)": FunctionFragment;
    "setReward(uint256)": FunctionFragment;
    "subscriptionId()": FunctionFragment;
    "totalsUSDT(uint256)": FunctionFragment;
    "totalsWETH(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "weth()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "deployed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositTimestamps",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityUSDT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityWETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTotalUSDT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTotalWETH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minLock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nonfungiblePositionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "recentWinner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "requestId", values?: undefined): string;
  encodeFunctionData(functionFragment: "reward", values?: undefined): string;
  encodeFunctionData(functionFragment: "sdai", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setMaxTotalUSDT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTotalWETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinLock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalsUSDT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalsWETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "deployed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositTimestamps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityUSDT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityWETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTotalUSDT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTotalWETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minLock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonfungiblePositionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recentWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requestId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sdai", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTotalUSDT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTotalWETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMinLock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalsUSDT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalsWETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(uint256,address)": EventFragment;
    "DepositETH(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RequestedRandomness(uint256)": EventFragment;
    "SetMaxTotalUSDT(uint256)": EventFragment;
    "SetMaxTotalWETH(uint256)": EventFragment;
    "SetMinLock(uint256)": EventFragment;
    "SetReward(uint256)": EventFragment;
    "Withdrawal(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositETH"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestedRandomness"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxTotalUSDT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxTotalWETH"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMinLock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export type DepositEvent = TypedEvent<
  [BigNumber, string] & { tokenId: BigNumber; owner: string }
>;

export type DepositETHEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    sender: string;
    amount: BigNumber;
    balance: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RequestedRandomnessEvent = TypedEvent<
  [BigNumber] & { requestId: BigNumber }
>;

export type SetMaxTotalUSDTEvent = TypedEvent<
  [BigNumber] & { maxTotal: BigNumber }
>;

export type SetMaxTotalWETHEvent = TypedEvent<
  [BigNumber] & { maxTotal: BigNumber }
>;

export type SetMinLockEvent = TypedEvent<[BigNumber] & { duration: BigNumber }>;

export type SetRewardEvent = TypedEvent<[BigNumber] & { reward: BigNumber }>;

export type WithdrawalEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    tokenId: BigNumber;
    owner: string;
    rewardPaid: BigNumber;
  }
>;

export class Lotto extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LottoInterface;

  functions: {
    deployed(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositTimestamps(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidityUSDT(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidityWETH(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxTotalUSDT(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxTotalWETH(overrides?: CallOverrides): Promise<[BigNumber]>;

    minLock(overrides?: CallOverrides): Promise<[BigNumber]>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recentWinner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestId(overrides?: CallOverrides): Promise<[BigNumber]>;

    reward(overrides?: CallOverrides): Promise<[BigNumber]>;

    sdai(overrides?: CallOverrides): Promise<[string]>;

    setMaxTotalUSDT(
      _newMaxTotalUSDT: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxTotalWETH(
      _newMaxTotalWETH: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinLock(
      _newMinLock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReward(
      _newReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    subscriptionId(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalsUSDT(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalsWETH(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  deposit(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositTimestamps(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  liquidityUSDT(overrides?: CallOverrides): Promise<BigNumber>;

  liquidityWETH(overrides?: CallOverrides): Promise<BigNumber>;

  maxTotalUSDT(overrides?: CallOverrides): Promise<BigNumber>;

  maxTotalWETH(overrides?: CallOverrides): Promise<BigNumber>;

  minLock(overrides?: CallOverrides): Promise<BigNumber>;

  nonfungiblePositionManager(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: string,
    from: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  rawFulfillRandomWords(
    requestId: BigNumberish,
    randomWords: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recentWinner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestId(overrides?: CallOverrides): Promise<BigNumber>;

  reward(overrides?: CallOverrides): Promise<BigNumber>;

  sdai(overrides?: CallOverrides): Promise<string>;

  setMaxTotalUSDT(
    _newMaxTotalUSDT: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxTotalWETH(
    _newMaxTotalWETH: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinLock(
    _newMinLock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReward(
    _newReward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  subscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

  totalsUSDT(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  totalsWETH(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  withdraw(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deployed(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    depositTimestamps(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityUSDT(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityWETH(overrides?: CallOverrides): Promise<BigNumber>;

    maxTotalUSDT(overrides?: CallOverrides): Promise<BigNumber>;

    maxTotalWETH(overrides?: CallOverrides): Promise<BigNumber>;

    minLock(overrides?: CallOverrides): Promise<BigNumber>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    recentWinner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestId(overrides?: CallOverrides): Promise<BigNumber>;

    reward(overrides?: CallOverrides): Promise<BigNumber>;

    sdai(overrides?: CallOverrides): Promise<string>;

    setMaxTotalUSDT(
      _newMaxTotalUSDT: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTotalWETH(
      _newMaxTotalWETH: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinLock(
      _newMinLock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReward(
      _newReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    subscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

    totalsUSDT(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalsWETH(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    weth(overrides?: CallOverrides): Promise<string>;

    withdraw(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Deposit(uint256,address)"(
      tokenId?: null,
      owner?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { tokenId: BigNumber; owner: string }
    >;

    Deposit(
      tokenId?: null,
      owner?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { tokenId: BigNumber; owner: string }
    >;

    "DepositETH(address,uint256,uint256)"(
      sender?: string | null,
      amount?: null,
      balance?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; amount: BigNumber; balance: BigNumber }
    >;

    DepositETH(
      sender?: string | null,
      amount?: null,
      balance?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; amount: BigNumber; balance: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "RequestedRandomness(uint256)"(
      requestId?: null
    ): TypedEventFilter<[BigNumber], { requestId: BigNumber }>;

    RequestedRandomness(
      requestId?: null
    ): TypedEventFilter<[BigNumber], { requestId: BigNumber }>;

    "SetMaxTotalUSDT(uint256)"(
      maxTotal?: null
    ): TypedEventFilter<[BigNumber], { maxTotal: BigNumber }>;

    SetMaxTotalUSDT(
      maxTotal?: null
    ): TypedEventFilter<[BigNumber], { maxTotal: BigNumber }>;

    "SetMaxTotalWETH(uint256)"(
      maxTotal?: null
    ): TypedEventFilter<[BigNumber], { maxTotal: BigNumber }>;

    SetMaxTotalWETH(
      maxTotal?: null
    ): TypedEventFilter<[BigNumber], { maxTotal: BigNumber }>;

    "SetMinLock(uint256)"(
      duration?: null
    ): TypedEventFilter<[BigNumber], { duration: BigNumber }>;

    SetMinLock(
      duration?: null
    ): TypedEventFilter<[BigNumber], { duration: BigNumber }>;

    "SetReward(uint256)"(
      reward?: null
    ): TypedEventFilter<[BigNumber], { reward: BigNumber }>;

    SetReward(
      reward?: null
    ): TypedEventFilter<[BigNumber], { reward: BigNumber }>;

    "Withdrawal(uint256,address,uint256)"(
      tokenId?: null,
      owner?: null,
      rewardPaid?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { tokenId: BigNumber; owner: string; rewardPaid: BigNumber }
    >;

    Withdrawal(
      tokenId?: null,
      owner?: null,
      rewardPaid?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { tokenId: BigNumber; owner: string; rewardPaid: BigNumber }
    >;
  };

  estimateGas: {
    deployed(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositTimestamps(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityUSDT(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityWETH(overrides?: CallOverrides): Promise<BigNumber>;

    maxTotalUSDT(overrides?: CallOverrides): Promise<BigNumber>;

    maxTotalWETH(overrides?: CallOverrides): Promise<BigNumber>;

    minLock(overrides?: CallOverrides): Promise<BigNumber>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recentWinner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestId(overrides?: CallOverrides): Promise<BigNumber>;

    reward(overrides?: CallOverrides): Promise<BigNumber>;

    sdai(overrides?: CallOverrides): Promise<BigNumber>;

    setMaxTotalUSDT(
      _newMaxTotalUSDT: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxTotalWETH(
      _newMaxTotalWETH: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinLock(
      _newMinLock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReward(
      _newReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    subscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

    totalsUSDT(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalsWETH(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deployed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositTimestamps(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityUSDT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityWETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTotalUSDT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTotalWETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minLock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonfungiblePositionManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recentWinner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sdai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMaxTotalUSDT(
      _newMaxTotalUSDT: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTotalWETH(
      _newMaxTotalWETH: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinLock(
      _newMinLock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReward(
      _newReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    subscriptionId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalsUSDT(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalsWETH(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
